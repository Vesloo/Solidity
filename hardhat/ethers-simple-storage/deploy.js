const { ethers } = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
    // ---- EASY WAY ----
    // Set the RPC Provider
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
    // Set the wallet
    // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
    let wallet = new ethers.Wallet.fromEncryptedJsonSync(
        encryptedJson,
        process.env.PASSWORD
    );
    wallet = wallet.connect(provider);
    // Read abi and binaries from files
    const abi = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.abi",
        "utf-8"
    );
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf-8"
    );
    // Set the contract factory
    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

    // Deploy the contract
    console.log("Deploying contract...");
    const contract = await contractFactory.deploy();
    // Set the first transaction and wait
    await contract.deployTransaction.wait(1);
    console.log(contract.address);

    // Get the favorite number
    const favoriteNumber = await contract.retrieve();
    console.log(favoriteNumber.toString());
    // Store a new favorite number
    const transactionResponse = await contract.store("1000");
    // Wait for the transaction to be mined
    const transactionReceipt = await transactionResponse.wait(1);
    // Get the favorite number again
    const newFavoriteNumber = await contract.retrieve();
    console.log(newFavoriteNumber.toString());

    // ---- HARD WAY ----
    // console.log("Let's deploy with only transaction data");
    // const nonce = await wallet.getTransactionCount();
    // const tx = {
    //     nonce: nonce,
    //     gasPrice:200000,
    //     gasLimit:2000000,
    //     to: null,
    //     value: 0,
    //     data: "0x6080604052737ebeaddef1f4498a06fce61bd532b816dea124316000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060146101000a81548160ff0219169083151502179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60025560016003556040518060400160405280600c81526020017f48656c6c6f20576f726c6421000000000000000000000000000000000000000081525060049081620000e2919062000395565b507f63617400000000000000000000000000000000000000000000000000000000006005553480156200011457600080fd5b506200047c565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200019d57607f821691505b602082108103620001b357620001b262000155565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200021d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001de565b620002298683620001de565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000276620002706200026a8462000241565b6200024b565b62000241565b9050919050565b6000819050919050565b620002928362000255565b620002aa620002a1826200027d565b848454620001eb565b825550505050565b600090565b620002c1620002b2565b620002ce81848462000287565b505050565b5b81811015620002f657620002ea600082620002b7565b600181019050620002d4565b5050565b601f82111562000345576200030f81620001b9565b6200031a84620001ce565b810160208510156200032a578190505b620003426200033985620001ce565b830182620002d3565b50505b505050565b600082821c905092915050565b60006200036a600019846008026200034a565b1980831691505092915050565b600062000385838362000357565b9150826002028217905092915050565b620003a0826200011b565b67ffffffffffffffff811115620003bc57620003bb62000126565b5b620003c8825462000184565b620003d5828285620002fa565b600060209050601f8311600181146200040d5760008415620003f8578287015190505b62000404858262000377565b86555062000474565b601f1984166200041d86620001b9565b60005b82811015620004475784890151825560018201915060208501945060208101905062000420565b8683101562000467578489015162000463601f89168262000357565b8355505b6001600288020188555050505b505050505050565b610996806200048c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063230fd34c146100675780632e64cec114610098578063377172b9146100b65780636057361d146100d45780636f760f41146100f057806390c3ee4d1461010c575b600080fd5b610081600480360381019061007c9190610335565b61013c565b60405161008f92919061040a565b60405180910390f35b6100a06101f8565b6040516100ad919061043a565b60405180910390f35b6100be610202565b6040516100cb919061043a565b60405180910390f35b6100ee60048036038101906100e99190610335565b610208565b005b61010a6004803603810190610105919061058a565b610212565b005b610126600480360381019061012191906105e6565b6102a3565b604051610133919061043a565b60405180910390f35b6006818154811061014c57600080fd5b906000526020600020906002020160009150905080600001805461016f9061065e565b80601f016020809104026020016040519081016040528092919081815260200182805461019b9061065e565b80156101e85780601f106101bd576101008083540402835291602001916101e8565b820191906000526020600020905b8154815290600101906020018083116101cb57829003601f168201915b5050505050908060010154905082565b6000600154905090565b60015481565b8060018190555050565b61021a6102d1565b828160000181905250818160200181815250506006819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161026e919061083b565b506020820151816001015550508160078460405161028c9190610949565b908152602001604051809103902081905550505050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610312816102ff565b811461031d57600080fd5b50565b60008135905061032f81610309565b92915050565b60006020828403121561034b5761034a6102f5565b5b600061035984828501610320565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561039c578082015181840152602081019050610381565b838111156103ab576000848401525b50505050565b6000601f19601f8301169050919050565b60006103cd82610362565b6103d7818561036d565b93506103e781856020860161037e565b6103f0816103b1565b840191505092915050565b610404816102ff565b82525050565b6000604082019050818103600083015261042481856103c2565b905061043360208301846103fb565b9392505050565b600060208201905061044f60008301846103fb565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610497826103b1565b810181811067ffffffffffffffff821117156104b6576104b561045f565b5b80604052505050565b60006104c96102eb565b90506104d5828261048e565b919050565b600067ffffffffffffffff8211156104f5576104f461045f565b5b6104fe826103b1565b9050602081019050919050565b82818337600083830152505050565b600061052d610528846104da565b6104bf565b9050828152602081018484840111156105495761054861045a565b5b61055484828561050b565b509392505050565b600082601f83011261057157610570610455565b5b813561058184826020860161051a565b91505092915050565b600080604083850312156105a1576105a06102f5565b5b600083013567ffffffffffffffff8111156105bf576105be6102fa565b5b6105cb8582860161055c565b92505060206105dc85828601610320565b9150509250929050565b6000602082840312156105fc576105fb6102f5565b5b600082013567ffffffffffffffff81111561061a576106196102fa565b5b6106268482850161055c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061067657607f821691505b6020821081036106895761068861062f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826106b4565b6106fb86836106b4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061073861073361072e846102ff565b610713565b6102ff565b9050919050565b6000819050919050565b6107528361071d565b61076661075e8261073f565b8484546106c1565b825550505050565b600090565b61077b61076e565b610786818484610749565b505050565b5b818110156107aa5761079f600082610773565b60018101905061078c565b5050565b601f8211156107ef576107c08161068f565b6107c9846106a4565b810160208510156107d8578190505b6107ec6107e4856106a4565b83018261078b565b50505b505050565b600082821c905092915050565b6000610812600019846008026107f4565b1980831691505092915050565b600061082b8383610801565b9150826002028217905092915050565b61084482610362565b67ffffffffffffffff81111561085d5761085c61045f565b5b610867825461065e565b6108728282856107ae565b600060209050601f8311600181146108a55760008415610893578287015190505b61089d858261081f565b865550610905565b601f1984166108b38661068f565b60005b828110156108db578489015182556001820191506020850194506020810190506108b6565b868310156108f857848901516108f4601f891682610801565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600061092382610362565b61092d818561090d565b935061093d81856020860161037e565b80840191505092915050565b60006109558284610918565b91508190509291505056fea2646970667358221220c84d8d802912ccbe00fe5c25532ede08b51d2138b753bdc51eda7d74f486df7d64736f6c634300080f0033",
    //     chainId: 1337,
    // }
    // const sendTxResponse = await wallet.sendTransaction(tx);
    // await sendTxResponse.wait(1);
    // console.log(sendTxResponse);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
